
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-video-gallery-{{ ai_gen_id }} {
    /* padding: {{ block.settings.section_padding_top }}px {{ block.settings.section_padding_right }}px {{ block.settings.section_padding_bottom }}px {{ block.settings.section_padding_left }}px; */
    background-color: {{ block.settings.background_color }};
    min-height: 200px;
  }

  .ai-video-gallery-container-{{ ai_gen_id }} {
    max-width: {{block.settings.width_layout}}px;
    margin: 0 auto;
    padding: {{ block.settings.vertical_padding }}px 20px;
  }

  .ai-video-gallery-header-{{ ai_gen_id }} {
    text-align: {{ block.settings.text_alignment }};
    margin-bottom: {{ block.settings.header_spacing }}px;
  }

  .ai-video-gallery-subheading-{{ ai_gen_id }} {
    font-size: {{ block.settings.subheading_size }}px;
    color: {{ block.settings.subheading_color }};
    margin: 0 0 10px;
    font-weight: 400;
    letter-spacing: 1px;
    text-transform: uppercase;
  }

  .ai-video-gallery-heading-{{ ai_gen_id }} {
    font-size: {{ block.settings.heading_size }}px;
    color: {{ block.settings.heading_color }};
    margin: 0;
    font-weight: 600;
    letter-spacing: 2px;
  }

  .ai-video-gallery-wrapper-{{ ai_gen_id }} {
    position: relative;
  }

  .ai-video-gallery-grid-{{ ai_gen_id }} {
    {% if block.settings.enable_carousel %}
      display: flex;
      overflow-x: auto;
      scroll-behavior: smooth;
      gap: {{ block.settings.grid_gap }}px;
      scrollbar-width: none;
      -ms-overflow-style: none;
      padding-bottom: 10px;
    {% else %}
      display: grid;
      grid-template-columns: repeat({{ block.settings.columns_desktop }}, 1fr);
      gap: {{ block.settings.grid_gap }}px;
    {% endif %}
    min-height: 200px;
  }

  .ai-video-gallery-grid-{{ ai_gen_id }}::-webkit-scrollbar {
    display: none;
  }

  .ai-video-gallery-item-{{ ai_gen_id }} {
    position: relative;
    border-radius: {{ block.settings.video_border_radius }}px;
    overflow: hidden;
    cursor: pointer;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    background-color: #f5f5f5;display: block;
    {% if block.settings.enable_carousel %}
      flex: 0 0 {{ block.settings.item_width }}px;
      min-width: {{ block.settings.item_width }}px;
    {% endif %}
  }

  .ai-video-gallery-item-{{ ai_gen_id }}:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
  }

  .ai-video-gallery-thumbnail-{{ ai_gen_id }} {
    width: 100%;
    height: {{ block.settings.item_height }}px;
    object-fit: cover;
    display: block;
  }

  .ai-video-gallery-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: {{ block.settings.item_height }}px;
    background-color: #f4f4f4;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 2px dashed #ccc;
  }

  .ai-video-gallery-placeholder-{{ ai_gen_id }} svg {
    width: 60px;
    height: 60px;
    opacity: 0.5;
    color: #999;
  }

  .ai-video-gallery-play-button-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: {{ block.settings.play_button_size }}px;
    height: {{ block.settings.play_button_size }}px;
    background-color: ;
    border:3px solid {{ block.settings.play_button_color }};
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
    z-index: 2;
  }

  .ai-video-gallery-item-{{ ai_gen_id }}:hover .ai-video-gallery-play-button-{{ ai_gen_id }} {
    transform: translate(-50%, -50%) scale(1.1);
    background-color: {{ block.settings.play_button_hover_color }};
  }

  .ai-video-gallery-play-icon-{{ ai_gen_id }} {
    width: calc({{ block.settings.play_button_size }}px * 0.4);
    height: calc({{ block.settings.play_button_size }}px * 0.4);
    color: {{ block.settings.play_icon_color }};
    margin-left: 3px;
  }

  .ai-video-gallery-overlay-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(45deg, rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.3));
    opacity: 0;
    transition: opacity 0.3s ease;}

  .ai-video-gallery-item-{{ ai_gen_id }}:hover .ai-video-gallery-overlay-{{ ai_gen_id }} {
    opacity: 1;
  }

  .ai-video-gallery-nav-{{ ai_gen_id }} {
    {% unless block.settings.enable_carousel %}
      display: none;
    {% endunless %}
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: {{ block.settings.nav_button_color }};
    border: none;
    border-radius: 50%;
    width: {{ block.settings.nav_button_size }}px;
    height: {{ block.settings.nav_button_size }}px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    z-index: 3;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
  }

  .ai-video-gallery-nav-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.nav_button_hover_color }};
    transform: translateY(-50%) scale(1.1);
  }

  .ai-video-gallery-nav-{{ ai_gen_id }}:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .ai-video-gallery-nav-prev-{{ ai_gen_id }} {
    left: -20px;
  }

  .ai-video-gallery-nav-next-{{ ai_gen_id }} {
    right: -20px;
  }

  .ai-video-gallery-nav-icon-{{ ai_gen_id }} {
    width: calc({{ block.settings.nav_button_size }}px * 0.4);
    height: calc({{ block.settings.nav_button_size }}px * 0.4);
    color: {{ block.settings.nav_icon_color }};
  }

  .ai-video-gallery-dots-{{ ai_gen_id }} {
    {% unless block.settings.enable_carousel and block.settings.show_dots %}
      display: none;
    {% endunless %}
    display: flex;
    justify-content: center;
    gap: 10px;
    margin-top: 20px;
  }

  .ai-video-gallery-dot-{{ ai_gen_id }} {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background-color: {{ block.settings.dot_color }};
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
    opacity: 0.5;
  }

  .ai-video-gallery-dot-{{ ai_gen_id }}.active {
    background-color: {{ block.settings.dot_active_color }};
    opacity: 1;
    transform: scale(1.2);
  }

  @media screen and (max-width: 768px) {
    .ai-video-gallery-{{ ai_gen_id }} {
      padding: {{ block.settings.section_padding_top | times: 0.8 }}px {{ block.settings.section_padding_right | times: 0.8 }}px {{ block.settings.section_padding_bottom | times: 0.8 }}px {{ block.settings.section_padding_left | times: 0.8 }}px;
    }

    .ai-video-gallery-grid-{{ ai_gen_id }} {
      {% if block.settings.enable_carousel %}
        gap: {{ block.settings.grid_gap | times: 0.7 }}px;
      {% else %}
        {% if block.settings.columns_mobile == '1' %}
          grid-template-columns: 1fr;
        {% else %}
          grid-template-columns: repeat(2, 1fr);
        {% endif %}gap: {{ block.settings.grid_gap | times: 0.7 }}px;
      {% endif %}
    }

    .ai-video-gallery-item-{{ ai_gen_id }} {
      {% if block.settings.enable_carousel %}
        flex: 0 0 {{ block.settings.item_width | times: 0.8 }}px;
        min-width: {{ block.settings.item_width | times: 0.8 }}px;
      {% endif %}
    }

    .ai-video-gallery-heading-{{ ai_gen_id }} {
      font-size: {{ block.settings.heading_size | times: 0.8 }}px;
    }

    .ai-video-gallery-subheading-{{ ai_gen_id }} {
      font-size: {{ block.settings.subheading_size | times: 0.9 }}px;
      
    }

    .ai-video-gallery-thumbnail-{{ ai_gen_id }},
    .ai-video-gallery-placeholder-{{ ai_gen_id }} {
      height: {{ block.settings.item_height | times: 0.8 }}px;}

    .ai-video-gallery-nav-prev-{{ ai_gen_id }} {
      left: -10px;
    }

    .ai-video-gallery-nav-next-{{ ai_gen_id }} {
      right: -10px;
    }
  }

  @media screen and (max-width: 480px) {
    .ai-video-gallery-{{ ai_gen_id }} {
      padding: {{ block.settings.section_padding_top | times: 0.6 }}px {{ block.settings.section_padding_right | times: 0.6 }}px {{ block.settings.section_padding_bottom | times: 0.6 }}px {{ block.settings.section_padding_left | times: 0.6 }}px;
    }

    .ai-video-gallery-grid-{{ ai_gen_id }} {
      {% unless block.settings.enable_carousel %}
        grid-template-columns: 1fr;
      {% endunless %}
    }

    .ai-video-gallery-item-{{ ai_gen_id }} {
      {% if block.settings.enable_carousel %}
        flex: 0 0 {{ block.settings.item_width | times: 0.7 }}px;
        min-width: {{ block.settings.item_width | times: 0.7 }}px;
      {% endif %}
    }

    .ai-video-gallery-thumbnail-{{ ai_gen_id }},
    .ai-video-gallery-placeholder-{{ ai_gen_id }} {
      height: {{ block.settings.item_height | times: 0.7 }}px;
    }
  }
{% endstyle %}<video-gallery-{{ ai_gen_id }}
  class="ai-video-gallery-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-video-gallery-container-{{ ai_gen_id }}">
    <div class="ai-video-gallery-header-{{ ai_gen_id }}">
      {% if block.settings.subheading != blank %}
        <p class="ai-video-gallery-subheading-{{ ai_gen_id }}">{{ block.settings.subheading }}</p>
      {% endif %}
      {% if block.settings.heading != blank %}
        <h2 class="ai-video-gallery-heading-{{ ai_gen_id }}">{{ block.settings.heading }}</h2>
      {% endif %}
    </div>

    <div class="ai-video-gallery-wrapper-{{ ai_gen_id }}">
      {% if block.settings.enable_carousel and block.settings.show_nav_buttons %}
        <button
          class="ai-video-gallery-nav-{{ ai_gen_id }} ai-video-gallery-nav-prev-{{ ai_gen_id }}"
          aria-label="Previous videos"
        >
          <svg
            class="ai-video-gallery-nav-icon-{{ ai_gen_id }}"
            viewBox="0 0 24 24"
            fill="currentColor"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
          </svg>
        </button>

        <button
          class="ai-video-gallery-nav-{{ ai_gen_id }} ai-video-gallery-nav-next-{{ ai_gen_id }}"
          aria-label="Next videos"
        >
          <svg
            class="ai-video-gallery-nav-icon-{{ ai_gen_id }}"
            viewBox="0 0 24 24"
            fill="currentColor"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path d="M8.59 16.59L10 18l6-6-6-6-1.41 1.41L13.17 12z"/>
          </svg>
        </button>
      {% endif %}

      <div class="ai-video-gallery-grid-{{ ai_gen_id }}">
        {% assign videos_found = false %}
        {% for i in (1..4) %}
          {% liquid
            assign video_key = 'video_' | append: i
            assign thumbnail_key = 'thumbnail_' | append: i
            assign video_url = block.settings[video_key]
            assign thumbnail_image = block.settings[thumbnail_key]
          %}

          {% if video_url != blank %}
            {% assign videos_found = true %}
            <div
              class="ai-video-gallery-item-{{ ai_gen_id }}"
              data-video-url="{{ video_url }}"
              data-video-index="{{ i }}">
              {% if thumbnail_image %}
                <img
                  src="{{ thumbnail_image | image_url: width: 600 }}"
                  alt="Video {{ i }} thumbnail"
                  class="ai-video-gallery-thumbnail-{{ ai_gen_id }}"
                  loading="lazy"width="600"
                  height="400"
                >
              {% else %}
                <div class="ai-video-gallery-placeholder-{{ ai_gen_id }}">
                  {{ 'image' | placeholder_svg_tag }}
                </div>
              {% endif %}

              <div class="ai-video-gallery-overlay-{{ ai_gen_id }}"></div>

              <div class="ai-video-gallery-play-button-{{ ai_gen_id }}">
                <svg
                  class="ai-video-gallery-play-icon-{{ ai_gen_id }}"
                  viewBox="0 0 24 24"
                  fill="currentColor"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path d="M8 5v14l11-7z"/>
                </svg>
              </div>
            </div>
          {% endif %}
        {% endfor %}

        {% unless videos_found %}
          <div class="ai-video-gallery-item-{{ ai_gen_id }}">
            <div class="ai-video-gallery-placeholder-{{ ai_gen_id }}">
              {{ 'image' | placeholder_svg_tag }}
            </div>
          </div>
        {% endunless %}
      </div>
    </div>

    {% if block.settings.enable_carousel and block.settings.show_dots %}
      <div class="ai-video-gallery-dots-{{ ai_gen_id }}">
        {% for i in (1..4) %}
          {% liquid
            assign video_key = 'video_' | append: i
            assign video_url = block.settings[video_key]
          %}
          {% if video_url != blank %}
            <button
              class="ai-video-gallery-dot-{{ ai_gen_id }} {% if forloop.first %}active{% endif %}"
              data-slide="{{ forloop.index0 }}"
              aria-label="Go to video {{ forloop.index }}"
            ></button>
          {% endif %}
        {% endfor %}
      </div>
    {% endif %}
  </div>
</video-gallery-{{ ai_gen_id }}><script>
  (function() {
    class VideoGallery{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.currentSlide = 0;
        this.isCarousel = {{ block.settings.enable_carousel | json }};
        this.itemWidth = {{ block.settings.item_width }};
        this.gap = {{ block.settings.grid_gap }};
      }

      connectedCallback() {
        this.videoItems = this.querySelectorAll('.ai-video-gallery-item-{{ ai_gen_id }}[data-video-url]');
        this.grid = this.querySelector('.ai-video-gallery-grid-{{ ai_gen_id }}');
        this.prevButton = this.querySelector('.ai-video-gallery-nav-prev-{{ ai_gen_id }}');
        this.nextButton = this.querySelector('.ai-video-gallery-nav-next-{{ ai_gen_id }}');
        this.dots = this.querySelectorAll('.ai-video-gallery-dot-{{ ai_gen_id }}');
        this.setupEventListeners();if (this.isCarousel) {
          this.updateCarouselState();
        }
      }

      setupEventListeners() {
        this.videoItems.forEach((item, index) => {
          const videoUrl = item.dataset.videoUrl;
          item.addEventListener('click', (e) => {
            e.preventDefault();
            if (videoUrl) {
              this.openVideoModal(videoUrl);
            }
          });

          item.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' || e.key === ' ') {
              e.preventDefault();
              if (videoUrl) {
                this.openVideoModal(videoUrl);
              }
            }
          });

          item.setAttribute('tabindex', '0');
          item.setAttribute('role', 'button');item.setAttribute('aria-label', `Play video ${index + 1}`);
        });

        if (this.isCarousel) {
          if (this.prevButton) {
            this.prevButton.addEventListener('click', () => this.previousSlide());
          }
          if (this.nextButton) {
            this.nextButton.addEventListener('click', () => this.nextSlide());
          }

          this.dots.forEach((dot, index) => {
            dot.addEventListener('click', () => this.goToSlide(index));
          });

          let isDown = false;
          let startX;
          let scrollLeft;

          this.grid.addEventListener('mousedown', (e) => {
            isDown = true;
            startX = e.pageX - this.grid.offsetLeft;
            scrollLeft = this.grid.scrollLeft;
          });

          this.grid.addEventListener('mouseleave', () => {
            isDown = false;
          });

          this.grid.addEventListener('mouseup', () => {
            isDown = false;
          });

          this.grid.addEventListener('mousemove', (e) => {
            if (!isDown) return;
            e.preventDefault();
            const x = e.pageX - this.grid.offsetLeft;
            const walk = (x - startX) * 2;
            this.grid.scrollLeft = scrollLeft - walk;
          });

          this.grid.addEventListener('scroll', () => {
            this.updateDotsFromScroll();
          });
        }
      }

      previousSlide() {
        if (this.currentSlide > 0) {
          this.currentSlide--;
          this.updateCarousel();
        }
      }

      nextSlide() {
        if (this.currentSlide < this.videoItems.length - 1) {
          this.currentSlide++;
          this.updateCarousel();
        }
      }

      goToSlide(index) {
        this.currentSlide = index;
        this.updateCarousel();
      }

      updateCarousel() {
        const scrollPosition = this.currentSlide * (this.itemWidth + this.gap);
        this.grid.scrollTo({
          left: scrollPosition,
          behavior: 'smooth'
        });this.updateCarouselState();
      }

      updateCarouselState() {
        if (this.prevButton) {
          this.prevButton.disabled = this.currentSlide === 0;
        }
        
        if (this.nextButton) {
          this.nextButton.disabled = this.currentSlide >= this.videoItems.length - 1;
        }

        this.dots.forEach((dot, index) => {
          dot.classList.toggle('active', index === this.currentSlide);
        });
      }

      updateDotsFromScroll() {
        const scrollPosition = this.grid.scrollLeft;
        const slideIndex = Math.round(scrollPosition / (this.itemWidth + this.gap));
        if (slideIndex !== this.currentSlide && slideIndex >= 0 && slideIndex < this.videoItems.length) {
          this.currentSlide = slideIndex;
          this.updateCarouselState();
        }
      }

      openVideoModal(videoUrl) {
        const modal = document.createElement('div');
        modal.style.cssText = `
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: rgba(0, 0, 0, 0.9);
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 9999;
          padding: 20px;box-sizing: border-box;
        `;

        const videoContainer = document.createElement('div');
        videoContainer.style.cssText = `
          position: relative;
          width: 100%;
          max-width: 800px;
          aspect-ratio: 16/9;
        `;

        let videoElement;
        if (videoUrl.includes('youtube.com') || videoUrl.includes('youtu.be')) {
          const videoId = this.extractYouTubeId(videoUrl);
          videoElement = document.createElement('iframe');
          videoElement.src = `https://www.youtube.com/embed/${videoId}?autoplay=1`;
          videoElement.setAttribute('allowfullscreen', '');
        } else if (videoUrl.includes('vimeo.com')) {
          const videoId = this.extractVimeoId(videoUrl);
          videoElement = document.createElement('iframe');
          videoElement.src = `https://player.vimeo.com/video/${videoId}?autoplay=1`;
          videoElement.setAttribute('allowfullscreen', '');
        } else {
          videoElement = document.createElement('video');
          videoElement.src = videoUrl;
          videoElement.controls = true;
          videoElement.autoplay = true;}

        videoElement.style.cssText = `
          width: 100%;
          height: 100%;
          border: none;
        `;

        const closeButton = document.createElement('button');
        closeButton.innerHTML = '×';
        closeButton.style.cssText = `
          position: absolute;
          top: -40px;
          right: 0;
          background: none;
          border: none;
          color: white;
          font-size: 30px;
          cursor: pointer;
          padding: 5px;
          line-height: 1;
        `;

        const closeModal = () => {
          if (document.body.contains(modal)) {
            document.body.removeChild(modal);
            document.body.style.overflow = '';
          }
        };

        closeButton.addEventListener('click', closeModal);
        modal.addEventListener('click', (e) => {
          if (e.target === modal) closeModal();
        });

        document.addEventListener('keydown', function escapeHandler(e) {
          if (e.key === 'Escape') {
            closeModal();
            document.removeEventListener('keydown', escapeHandler);
          }
        });

        videoContainer.appendChild(videoElement);
        videoContainer.appendChild(closeButton);
        modal.appendChild(videoContainer);
        document.body.appendChild(modal);
        document.body.style.overflow = 'hidden';
      }

      extractYouTubeId(url) {
        const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/;
        const match = url.match(regExp);
        return (match && match[2].length === 11) ? match[2] : null;
      }

      extractVimeoId(url) {
        const regExp = /vimeo.com\/(\d+)/;
        const match = url.match(regExp);
        return match ? match[1] : null;
      }
    }

    customElements.define('video-gallery-{{ ai_gen_id }}', VideoGallery{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Video gallery",
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "text",
      "id": "subheading",
      "label": "Subheading",
      "default": "VIDEOS FROM MARE JOUEL"
    },
    {
      "type": "range",
      "id": "width_layout",
      "label": "Layout Width",
      "min": 1200,
      "step": 5,
      "max": 1400,
      "default":1200
    },
    {
      "type": "range",
      "id": "vertical_padding",
      "max": 100,
      "min": 0,
      "step": 2,
      "label": "Vertical Padding",
      "default":60
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "CAPTURE THE MOMENTS"
    },
    {
      "type": "select",
      "id": "text_alignment",
      "label": "Text alignment",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ],
      "default": "left"
    },
    {
      "type": "header",
      "content": "Video 1"
    },
    {
      "type": "url",
      "id": "video_1",
      "label": "Video URL"
    },
    {
      "type": "image_picker",
      "id": "thumbnail_1",
      "label": "Thumbnail image"
    },
    {
      "type": "header",
      "content": "Video 2"
    },
    {
      "type": "url",
      "id": "video_2",
      "label": "Video URL"
    },
    {
      "type": "image_picker",
      "id": "thumbnail_2",
      "label": "Thumbnail image"
    },
    {
      "type": "header",
      "content": "Video 3"
    },
    {
      "type": "url",
      "id": "video_3",
      "label": "Video URL"
    },
    {
      "type": "image_picker",
      "id": "thumbnail_3",
      "label": "Thumbnail image"
    },
    {
      "type": "header",
      "content": "Video 4"
    },
    {
      "type": "url",
      "id": "video_4",
      "label": "Video URL"
    },
    {
      "type": "image_picker",
      "id": "thumbnail_4",
      "label": "Thumbnail image"
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "checkbox",
      "id": "enable_carousel",
      "label": "Enable carousel mode",
      "default": false
    },
    {
      "type": "range",
      "id": "columns_desktop",
      "min": 1,
      "max": 4,
      "step": 1,
      "label": "Columns on desktop",
      "default": 4,
      "info": "Only applies when carousel is disabled"
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "label": "Columns on mobile",
      "options": [
        {
          "value": "1",
          "label": "1"
        },
        {
          "value": "2",
          "label": "2"
        }
      ],
      "default": "1",
      "info": "Only applies when carousel is disabled"
    },
    {
      "type": "range",
      "id": "grid_gap",
      "min": 10,
      "max": 50,
      "step": 5,
      "unit": "px",
      "label": "Grid gap",
      "default": 20
    },
    {
      "type": "range",
      "id": "header_spacing",
      "min": 20,
      "max": 80,
      "step": 5,
      "unit": "px",
      "label": "Header spacing",
      "default": 40
    },
    {
      "type": "header",
      "content": "Item dimensions"
    },
    {
      "type": "range",
      "id": "item_width",
      "min": 150,
      "max": 600,
      "step": 10,
      "unit": "px",
      "label": "Item width",
      "default": 200,
      "info": "Width of each video item"
    },
    {
      "type": "range",
      "id": "item_height",
      "min": 150,
      "max": 600,
      "step": 10,
      "unit": "px",
      "label": "Item height",
      "default": 250,
      "info": "Height of each video item"
    },
    {
      "type": "header",
      "content": "Carousel settings"
    },
    {
      "type": "checkbox",
      "id": "show_nav_buttons",
      "label": "Show navigation buttons",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_dots",
      "label": "Show dots navigation",
      "default": true
    },
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "heading_color",
      "label": "Heading color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "subheading_color",
      "label": "Subheading color",
      "default": "#666666"
    },
    {
      "type": "range",
      "id": "heading_size",
      "min": 16,
      "max": 48,
      "step": 2,
      "unit": "px",
      "label": "Heading size",
      "default": 32
    },
    {
      "type": "range",
      "id": "subheading_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Subheading size",
      "default": 16
    },
    {
      "type": "range",
      "id": "video_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Video border radius",
      "default": 8
    },
    {
      "type": "header",
      "content": "Play button"
    },
    {
      "type": "range",
      "id": "play_button_size",
      "min": 40,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Play button size",
      "default": 70
    },
    {
      "type": "color",
      "id": "play_button_color",
      "label": "Play button color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "play_button_hover_color",
      "label": "Play button hover color",
      "default": "#f0f0f0"
    },
    {
      "type": "color",
      "id": "play_icon_color",
      "label": "Play icon color",
      "default": "#000000"
    },
    {
      "type": "header",
      "content": "Navigation buttons"
    },
    {
      "type": "range",
      "id": "nav_button_size",
      "min": 30,
      "max": 60,
      "step": 5,
      "unit": "px",
      "label": "Navigation button size",
      "default": 40
    },
    {
      "type": "color",
      "id": "nav_button_color",
      "label": "Navigation button color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "nav_button_hover_color",
      "label": "Navigation button hover color",
      "default": "#f0f0f0"
    },
    {
      "type": "color",
      "id": "nav_icon_color",
      "label": "Navigation icon color",
      "default": "#000000"
    },
    {
      "type": "header",
      "content": "Dots navigation"
    },
    {
      "type": "color",
      "id": "dot_color",
      "label": "Dot color",
      "default": "#cccccc"
    },
    {
      "type": "color",
      "id": "dot_active_color",
      "label": "Active dot color",
      "default": "#000000"
    },
    {
      "type": "header",
      "content": "Section spacing"
    },
    {
      "type": "range",
      "id": "section_padding_top",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Top padding",
      "default": 60
    },
    {
      "type": "range",
      "id": "section_padding_bottom",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Bottom padding",
      "default": 60
    },
    {
      "type": "range",
      "id": "section_padding_left",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Left padding",
      "default": 20
    },
    {
      "type": "range",
      "id": "section_padding_right",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Right padding",
      "default": 20
    }
  ],
  "presets": [
    {
      "name": "Video gallery"
    }
  ]
}
{% endschema %}